// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 生成器配置，指定要生成 Prisma Client
generator client {
  // 定义了生成器的提供者，这里使用的是 prisma-client-js
  // 用于生成 JavaScript/TypeScript 客户端。
  provider = "prisma-client-js"
}

// 定义了数据源 db
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  // @id：标记模型中的某个字段为主键
  // @default(auto())：当插入新记录时，如果没有为该字段显式提供值，Prisma 会自动生成一个默认值
  // @map("_id")：Prisma 模型中的 id 字段映射到 MongoDB 集合中的 _id 字段
  // @db.ObjectId表明该字段在 MongoDB 中的类型是 ObjectId
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  sessions       Session[]
  accounts       Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // 确立了 Account 模型和 User 模型之间的关联关系，
  // 并且设置了级联删除以确保数据的完整性和一致性
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // provider 和 providerAccountId 的组合在 Account 模型中是唯一的
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  genre        String
  duration     String
}
